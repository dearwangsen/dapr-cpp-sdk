// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dapr/proto/common/v1/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_metadata_getter(int index);
namespace dapr {
namespace proto {
namespace common {
namespace v1 {
class Etag;
struct EtagDefaultTypeInternal;
extern EtagDefaultTypeInternal _Etag_default_instance_;
class HTTPExtension;
struct HTTPExtensionDefaultTypeInternal;
extern HTTPExtensionDefaultTypeInternal _HTTPExtension_default_instance_;
class InvokeRequest;
struct InvokeRequestDefaultTypeInternal;
extern InvokeRequestDefaultTypeInternal _InvokeRequest_default_instance_;
class InvokeResponse;
struct InvokeResponseDefaultTypeInternal;
extern InvokeResponseDefaultTypeInternal _InvokeResponse_default_instance_;
class StateItem;
struct StateItemDefaultTypeInternal;
extern StateItemDefaultTypeInternal _StateItem_default_instance_;
class StateItem_MetadataEntry_DoNotUse;
struct StateItem_MetadataEntry_DoNotUseDefaultTypeInternal;
extern StateItem_MetadataEntry_DoNotUseDefaultTypeInternal _StateItem_MetadataEntry_DoNotUse_default_instance_;
class StateOptions;
struct StateOptionsDefaultTypeInternal;
extern StateOptionsDefaultTypeInternal _StateOptions_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace dapr
PROTOBUF_NAMESPACE_OPEN
template<> ::dapr::proto::common::v1::Etag* Arena::CreateMaybeMessage<::dapr::proto::common::v1::Etag>(Arena*);
template<> ::dapr::proto::common::v1::HTTPExtension* Arena::CreateMaybeMessage<::dapr::proto::common::v1::HTTPExtension>(Arena*);
template<> ::dapr::proto::common::v1::InvokeRequest* Arena::CreateMaybeMessage<::dapr::proto::common::v1::InvokeRequest>(Arena*);
template<> ::dapr::proto::common::v1::InvokeResponse* Arena::CreateMaybeMessage<::dapr::proto::common::v1::InvokeResponse>(Arena*);
template<> ::dapr::proto::common::v1::StateItem* Arena::CreateMaybeMessage<::dapr::proto::common::v1::StateItem>(Arena*);
template<> ::dapr::proto::common::v1::StateItem_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::common::v1::StateItem_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::common::v1::StateOptions* Arena::CreateMaybeMessage<::dapr::proto::common::v1::StateOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dapr {
namespace proto {
namespace common {
namespace v1 {

enum HTTPExtension_Verb : int {
  HTTPExtension_Verb_NONE = 0,
  HTTPExtension_Verb_GET = 1,
  HTTPExtension_Verb_HEAD = 2,
  HTTPExtension_Verb_POST = 3,
  HTTPExtension_Verb_PUT = 4,
  HTTPExtension_Verb_DELETE = 5,
  HTTPExtension_Verb_CONNECT = 6,
  HTTPExtension_Verb_OPTIONS = 7,
  HTTPExtension_Verb_TRACE = 8,
  HTTPExtension_Verb_HTTPExtension_Verb_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HTTPExtension_Verb_HTTPExtension_Verb_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HTTPExtension_Verb_IsValid(int value);
constexpr HTTPExtension_Verb HTTPExtension_Verb_Verb_MIN = HTTPExtension_Verb_NONE;
constexpr HTTPExtension_Verb HTTPExtension_Verb_Verb_MAX = HTTPExtension_Verb_TRACE;
constexpr int HTTPExtension_Verb_Verb_ARRAYSIZE = HTTPExtension_Verb_Verb_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HTTPExtension_Verb_descriptor();
template<typename T>
inline const std::string& HTTPExtension_Verb_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HTTPExtension_Verb>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HTTPExtension_Verb_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HTTPExtension_Verb_descriptor(), enum_t_value);
}
inline bool HTTPExtension_Verb_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HTTPExtension_Verb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HTTPExtension_Verb>(
    HTTPExtension_Verb_descriptor(), name, value);
}
enum StateOptions_StateConcurrency : int {
  StateOptions_StateConcurrency_CONCURRENCY_UNSPECIFIED = 0,
  StateOptions_StateConcurrency_CONCURRENCY_FIRST_WRITE = 1,
  StateOptions_StateConcurrency_CONCURRENCY_LAST_WRITE = 2,
  StateOptions_StateConcurrency_StateOptions_StateConcurrency_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateOptions_StateConcurrency_StateOptions_StateConcurrency_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateOptions_StateConcurrency_IsValid(int value);
constexpr StateOptions_StateConcurrency StateOptions_StateConcurrency_StateConcurrency_MIN = StateOptions_StateConcurrency_CONCURRENCY_UNSPECIFIED;
constexpr StateOptions_StateConcurrency StateOptions_StateConcurrency_StateConcurrency_MAX = StateOptions_StateConcurrency_CONCURRENCY_LAST_WRITE;
constexpr int StateOptions_StateConcurrency_StateConcurrency_ARRAYSIZE = StateOptions_StateConcurrency_StateConcurrency_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateOptions_StateConcurrency_descriptor();
template<typename T>
inline const std::string& StateOptions_StateConcurrency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateOptions_StateConcurrency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateOptions_StateConcurrency_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateOptions_StateConcurrency_descriptor(), enum_t_value);
}
inline bool StateOptions_StateConcurrency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateOptions_StateConcurrency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateOptions_StateConcurrency>(
    StateOptions_StateConcurrency_descriptor(), name, value);
}
enum StateOptions_StateConsistency : int {
  StateOptions_StateConsistency_CONSISTENCY_UNSPECIFIED = 0,
  StateOptions_StateConsistency_CONSISTENCY_EVENTUAL = 1,
  StateOptions_StateConsistency_CONSISTENCY_STRONG = 2,
  StateOptions_StateConsistency_StateOptions_StateConsistency_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateOptions_StateConsistency_StateOptions_StateConsistency_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateOptions_StateConsistency_IsValid(int value);
constexpr StateOptions_StateConsistency StateOptions_StateConsistency_StateConsistency_MIN = StateOptions_StateConsistency_CONSISTENCY_UNSPECIFIED;
constexpr StateOptions_StateConsistency StateOptions_StateConsistency_StateConsistency_MAX = StateOptions_StateConsistency_CONSISTENCY_STRONG;
constexpr int StateOptions_StateConsistency_StateConsistency_ARRAYSIZE = StateOptions_StateConsistency_StateConsistency_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateOptions_StateConsistency_descriptor();
template<typename T>
inline const std::string& StateOptions_StateConsistency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateOptions_StateConsistency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateOptions_StateConsistency_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateOptions_StateConsistency_descriptor(), enum_t_value);
}
inline bool StateOptions_StateConsistency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateOptions_StateConsistency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateOptions_StateConsistency>(
    StateOptions_StateConsistency_descriptor(), name, value);
}
// ===================================================================

class HTTPExtension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.HTTPExtension) */ {
 public:
  inline HTTPExtension() : HTTPExtension(nullptr) {}
  virtual ~HTTPExtension();
  explicit constexpr HTTPExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HTTPExtension(const HTTPExtension& from);
  HTTPExtension(HTTPExtension&& from) noexcept
    : HTTPExtension() {
    *this = ::std::move(from);
  }

  inline HTTPExtension& operator=(const HTTPExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPExtension& operator=(HTTPExtension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTTPExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const HTTPExtension* internal_default_instance() {
    return reinterpret_cast<const HTTPExtension*>(
               &_HTTPExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HTTPExtension& a, HTTPExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPExtension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTTPExtension* New() const final {
    return CreateMaybeMessage<HTTPExtension>(nullptr);
  }

  HTTPExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTTPExtension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTTPExtension& from);
  void MergeFrom(const HTTPExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.common.v1.HTTPExtension";
  }
  protected:
  explicit HTTPExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef HTTPExtension_Verb Verb;
  static constexpr Verb NONE =
    HTTPExtension_Verb_NONE;
  static constexpr Verb GET =
    HTTPExtension_Verb_GET;
  static constexpr Verb HEAD =
    HTTPExtension_Verb_HEAD;
  static constexpr Verb POST =
    HTTPExtension_Verb_POST;
  static constexpr Verb PUT =
    HTTPExtension_Verb_PUT;
  static constexpr Verb DELETE =
    HTTPExtension_Verb_DELETE;
  static constexpr Verb CONNECT =
    HTTPExtension_Verb_CONNECT;
  static constexpr Verb OPTIONS =
    HTTPExtension_Verb_OPTIONS;
  static constexpr Verb TRACE =
    HTTPExtension_Verb_TRACE;
  static inline bool Verb_IsValid(int value) {
    return HTTPExtension_Verb_IsValid(value);
  }
  static constexpr Verb Verb_MIN =
    HTTPExtension_Verb_Verb_MIN;
  static constexpr Verb Verb_MAX =
    HTTPExtension_Verb_Verb_MAX;
  static constexpr int Verb_ARRAYSIZE =
    HTTPExtension_Verb_Verb_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Verb_descriptor() {
    return HTTPExtension_Verb_descriptor();
  }
  template<typename T>
  static inline const std::string& Verb_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Verb>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Verb_Name.");
    return HTTPExtension_Verb_Name(enum_t_value);
  }
  static inline bool Verb_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Verb* value) {
    return HTTPExtension_Verb_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQuerystringFieldNumber = 2,
    kVerbFieldNumber = 1,
  };
  // string querystring = 2;
  void clear_querystring();
  const std::string& querystring() const;
  void set_querystring(const std::string& value);
  void set_querystring(std::string&& value);
  void set_querystring(const char* value);
  void set_querystring(const char* value, size_t size);
  std::string* mutable_querystring();
  std::string* release_querystring();
  void set_allocated_querystring(std::string* querystring);
  private:
  const std::string& _internal_querystring() const;
  void _internal_set_querystring(const std::string& value);
  std::string* _internal_mutable_querystring();
  public:

  // .dapr.proto.common.v1.HTTPExtension.Verb verb = 1;
  void clear_verb();
  ::dapr::proto::common::v1::HTTPExtension_Verb verb() const;
  void set_verb(::dapr::proto::common::v1::HTTPExtension_Verb value);
  private:
  ::dapr::proto::common::v1::HTTPExtension_Verb _internal_verb() const;
  void _internal_set_verb(::dapr::proto::common::v1::HTTPExtension_Verb value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.HTTPExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr querystring_;
  int verb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class InvokeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.InvokeRequest) */ {
 public:
  inline InvokeRequest() : InvokeRequest(nullptr) {}
  virtual ~InvokeRequest();
  explicit constexpr InvokeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeRequest(const InvokeRequest& from);
  InvokeRequest(InvokeRequest&& from) noexcept
    : InvokeRequest() {
    *this = ::std::move(from);
  }

  inline InvokeRequest& operator=(const InvokeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeRequest& operator=(InvokeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvokeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeRequest* internal_default_instance() {
    return reinterpret_cast<const InvokeRequest*>(
               &_InvokeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InvokeRequest& a, InvokeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvokeRequest* New() const final {
    return CreateMaybeMessage<InvokeRequest>(nullptr);
  }

  InvokeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvokeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvokeRequest& from);
  void MergeFrom(const InvokeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.common.v1.InvokeRequest";
  }
  protected:
  explicit InvokeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kContentTypeFieldNumber = 3,
    kDataFieldNumber = 2,
    kHttpExtensionFieldNumber = 4,
  };
  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string content_type = 3;
  void clear_content_type();
  const std::string& content_type() const;
  void set_content_type(const std::string& value);
  void set_content_type(std::string&& value);
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  std::string* mutable_content_type();
  std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // .dapr.proto.common.v1.HTTPExtension http_extension = 4;
  bool has_http_extension() const;
  private:
  bool _internal_has_http_extension() const;
  public:
  void clear_http_extension();
  const ::dapr::proto::common::v1::HTTPExtension& http_extension() const;
  ::dapr::proto::common::v1::HTTPExtension* release_http_extension();
  ::dapr::proto::common::v1::HTTPExtension* mutable_http_extension();
  void set_allocated_http_extension(::dapr::proto::common::v1::HTTPExtension* http_extension);
  private:
  const ::dapr::proto::common::v1::HTTPExtension& _internal_http_extension() const;
  ::dapr::proto::common::v1::HTTPExtension* _internal_mutable_http_extension();
  public:
  void unsafe_arena_set_allocated_http_extension(
      ::dapr::proto::common::v1::HTTPExtension* http_extension);
  ::dapr::proto::common::v1::HTTPExtension* unsafe_arena_release_http_extension();

  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.InvokeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  ::dapr::proto::common::v1::HTTPExtension* http_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class InvokeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.InvokeResponse) */ {
 public:
  inline InvokeResponse() : InvokeResponse(nullptr) {}
  virtual ~InvokeResponse();
  explicit constexpr InvokeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeResponse(const InvokeResponse& from);
  InvokeResponse(InvokeResponse&& from) noexcept
    : InvokeResponse() {
    *this = ::std::move(from);
  }

  inline InvokeResponse& operator=(const InvokeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeResponse& operator=(InvokeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvokeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeResponse* internal_default_instance() {
    return reinterpret_cast<const InvokeResponse*>(
               &_InvokeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InvokeResponse& a, InvokeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvokeResponse* New() const final {
    return CreateMaybeMessage<InvokeResponse>(nullptr);
  }

  InvokeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvokeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvokeResponse& from);
  void MergeFrom(const InvokeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.common.v1.InvokeResponse";
  }
  protected:
  explicit InvokeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // string content_type = 2;
  void clear_content_type();
  const std::string& content_type() const;
  void set_content_type(const std::string& value);
  void set_content_type(std::string&& value);
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  std::string* mutable_content_type();
  std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // .google.protobuf.Any data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.InvokeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class StateItem_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StateItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StateItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  StateItem_MetadataEntry_DoNotUse();
  explicit constexpr StateItem_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StateItem_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StateItem_MetadataEntry_DoNotUse& other);
  static const StateItem_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StateItem_MetadataEntry_DoNotUse*>(&_StateItem_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.common.v1.StateItem.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.common.v1.StateItem.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto);
    return ::descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class StateItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.StateItem) */ {
 public:
  inline StateItem() : StateItem(nullptr) {}
  virtual ~StateItem();
  explicit constexpr StateItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateItem(const StateItem& from);
  StateItem(StateItem&& from) noexcept
    : StateItem() {
    *this = ::std::move(from);
  }

  inline StateItem& operator=(const StateItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateItem& operator=(StateItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateItem* internal_default_instance() {
    return reinterpret_cast<const StateItem*>(
               &_StateItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StateItem& a, StateItem& b) {
    a.Swap(&b);
  }
  inline void Swap(StateItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateItem* New() const final {
    return CreateMaybeMessage<StateItem>(nullptr);
  }

  StateItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateItem& from);
  void MergeFrom(const StateItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.common.v1.StateItem";
  }
  protected:
  explicit StateItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kEtagFieldNumber = 3,
    kOptionsFieldNumber = 5,
  };
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .dapr.proto.common.v1.Etag etag = 3;
  bool has_etag() const;
  private:
  bool _internal_has_etag() const;
  public:
  void clear_etag();
  const ::dapr::proto::common::v1::Etag& etag() const;
  ::dapr::proto::common::v1::Etag* release_etag();
  ::dapr::proto::common::v1::Etag* mutable_etag();
  void set_allocated_etag(::dapr::proto::common::v1::Etag* etag);
  private:
  const ::dapr::proto::common::v1::Etag& _internal_etag() const;
  ::dapr::proto::common::v1::Etag* _internal_mutable_etag();
  public:
  void unsafe_arena_set_allocated_etag(
      ::dapr::proto::common::v1::Etag* etag);
  ::dapr::proto::common::v1::Etag* unsafe_arena_release_etag();

  // .dapr.proto.common.v1.StateOptions options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::dapr::proto::common::v1::StateOptions& options() const;
  ::dapr::proto::common::v1::StateOptions* release_options();
  ::dapr::proto::common::v1::StateOptions* mutable_options();
  void set_allocated_options(::dapr::proto::common::v1::StateOptions* options);
  private:
  const ::dapr::proto::common::v1::StateOptions& _internal_options() const;
  ::dapr::proto::common::v1::StateOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::dapr::proto::common::v1::StateOptions* options);
  ::dapr::proto::common::v1::StateOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.StateItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StateItem_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::dapr::proto::common::v1::Etag* etag_;
  ::dapr::proto::common::v1::StateOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Etag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.Etag) */ {
 public:
  inline Etag() : Etag(nullptr) {}
  virtual ~Etag();
  explicit constexpr Etag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Etag(const Etag& from);
  Etag(Etag&& from) noexcept
    : Etag() {
    *this = ::std::move(from);
  }

  inline Etag& operator=(const Etag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Etag& operator=(Etag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Etag& default_instance() {
    return *internal_default_instance();
  }
  static inline const Etag* internal_default_instance() {
    return reinterpret_cast<const Etag*>(
               &_Etag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Etag& a, Etag& b) {
    a.Swap(&b);
  }
  inline void Swap(Etag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Etag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Etag* New() const final {
    return CreateMaybeMessage<Etag>(nullptr);
  }

  Etag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Etag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Etag& from);
  void MergeFrom(const Etag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Etag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.common.v1.Etag";
  }
  protected:
  explicit Etag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.Etag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class StateOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.StateOptions) */ {
 public:
  inline StateOptions() : StateOptions(nullptr) {}
  virtual ~StateOptions();
  explicit constexpr StateOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateOptions(const StateOptions& from);
  StateOptions(StateOptions&& from) noexcept
    : StateOptions() {
    *this = ::std::move(from);
  }

  inline StateOptions& operator=(const StateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateOptions& operator=(StateOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateOptions* internal_default_instance() {
    return reinterpret_cast<const StateOptions*>(
               &_StateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StateOptions& a, StateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(StateOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateOptions* New() const final {
    return CreateMaybeMessage<StateOptions>(nullptr);
  }

  StateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateOptions& from);
  void MergeFrom(const StateOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.common.v1.StateOptions";
  }
  protected:
  explicit StateOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StateOptions_StateConcurrency StateConcurrency;
  static constexpr StateConcurrency CONCURRENCY_UNSPECIFIED =
    StateOptions_StateConcurrency_CONCURRENCY_UNSPECIFIED;
  static constexpr StateConcurrency CONCURRENCY_FIRST_WRITE =
    StateOptions_StateConcurrency_CONCURRENCY_FIRST_WRITE;
  static constexpr StateConcurrency CONCURRENCY_LAST_WRITE =
    StateOptions_StateConcurrency_CONCURRENCY_LAST_WRITE;
  static inline bool StateConcurrency_IsValid(int value) {
    return StateOptions_StateConcurrency_IsValid(value);
  }
  static constexpr StateConcurrency StateConcurrency_MIN =
    StateOptions_StateConcurrency_StateConcurrency_MIN;
  static constexpr StateConcurrency StateConcurrency_MAX =
    StateOptions_StateConcurrency_StateConcurrency_MAX;
  static constexpr int StateConcurrency_ARRAYSIZE =
    StateOptions_StateConcurrency_StateConcurrency_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StateConcurrency_descriptor() {
    return StateOptions_StateConcurrency_descriptor();
  }
  template<typename T>
  static inline const std::string& StateConcurrency_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StateConcurrency>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StateConcurrency_Name.");
    return StateOptions_StateConcurrency_Name(enum_t_value);
  }
  static inline bool StateConcurrency_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StateConcurrency* value) {
    return StateOptions_StateConcurrency_Parse(name, value);
  }

  typedef StateOptions_StateConsistency StateConsistency;
  static constexpr StateConsistency CONSISTENCY_UNSPECIFIED =
    StateOptions_StateConsistency_CONSISTENCY_UNSPECIFIED;
  static constexpr StateConsistency CONSISTENCY_EVENTUAL =
    StateOptions_StateConsistency_CONSISTENCY_EVENTUAL;
  static constexpr StateConsistency CONSISTENCY_STRONG =
    StateOptions_StateConsistency_CONSISTENCY_STRONG;
  static inline bool StateConsistency_IsValid(int value) {
    return StateOptions_StateConsistency_IsValid(value);
  }
  static constexpr StateConsistency StateConsistency_MIN =
    StateOptions_StateConsistency_StateConsistency_MIN;
  static constexpr StateConsistency StateConsistency_MAX =
    StateOptions_StateConsistency_StateConsistency_MAX;
  static constexpr int StateConsistency_ARRAYSIZE =
    StateOptions_StateConsistency_StateConsistency_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StateConsistency_descriptor() {
    return StateOptions_StateConsistency_descriptor();
  }
  template<typename T>
  static inline const std::string& StateConsistency_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StateConsistency>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StateConsistency_Name.");
    return StateOptions_StateConsistency_Name(enum_t_value);
  }
  static inline bool StateConsistency_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StateConsistency* value) {
    return StateOptions_StateConsistency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConcurrencyFieldNumber = 1,
    kConsistencyFieldNumber = 2,
  };
  // .dapr.proto.common.v1.StateOptions.StateConcurrency concurrency = 1;
  void clear_concurrency();
  ::dapr::proto::common::v1::StateOptions_StateConcurrency concurrency() const;
  void set_concurrency(::dapr::proto::common::v1::StateOptions_StateConcurrency value);
  private:
  ::dapr::proto::common::v1::StateOptions_StateConcurrency _internal_concurrency() const;
  void _internal_set_concurrency(::dapr::proto::common::v1::StateOptions_StateConcurrency value);
  public:

  // .dapr.proto.common.v1.StateOptions.StateConsistency consistency = 2;
  void clear_consistency();
  ::dapr::proto::common::v1::StateOptions_StateConsistency consistency() const;
  void set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value);
  private:
  ::dapr::proto::common::v1::StateOptions_StateConsistency _internal_consistency() const;
  void _internal_set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.StateOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int concurrency_;
  int consistency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HTTPExtension

// .dapr.proto.common.v1.HTTPExtension.Verb verb = 1;
inline void HTTPExtension::clear_verb() {
  verb_ = 0;
}
inline ::dapr::proto::common::v1::HTTPExtension_Verb HTTPExtension::_internal_verb() const {
  return static_cast< ::dapr::proto::common::v1::HTTPExtension_Verb >(verb_);
}
inline ::dapr::proto::common::v1::HTTPExtension_Verb HTTPExtension::verb() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.HTTPExtension.verb)
  return _internal_verb();
}
inline void HTTPExtension::_internal_set_verb(::dapr::proto::common::v1::HTTPExtension_Verb value) {
  
  verb_ = value;
}
inline void HTTPExtension::set_verb(::dapr::proto::common::v1::HTTPExtension_Verb value) {
  _internal_set_verb(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.HTTPExtension.verb)
}

// string querystring = 2;
inline void HTTPExtension::clear_querystring() {
  querystring_.ClearToEmpty();
}
inline const std::string& HTTPExtension::querystring() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.HTTPExtension.querystring)
  return _internal_querystring();
}
inline void HTTPExtension::set_querystring(const std::string& value) {
  _internal_set_querystring(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.HTTPExtension.querystring)
}
inline std::string* HTTPExtension::mutable_querystring() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.HTTPExtension.querystring)
  return _internal_mutable_querystring();
}
inline const std::string& HTTPExtension::_internal_querystring() const {
  return querystring_.Get();
}
inline void HTTPExtension::_internal_set_querystring(const std::string& value) {
  
  querystring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HTTPExtension::set_querystring(std::string&& value) {
  
  querystring_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.common.v1.HTTPExtension.querystring)
}
inline void HTTPExtension::set_querystring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  querystring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.common.v1.HTTPExtension.querystring)
}
inline void HTTPExtension::set_querystring(const char* value,
    size_t size) {
  
  querystring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.common.v1.HTTPExtension.querystring)
}
inline std::string* HTTPExtension::_internal_mutable_querystring() {
  
  return querystring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HTTPExtension::release_querystring() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.HTTPExtension.querystring)
  return querystring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPExtension::set_allocated_querystring(std::string* querystring) {
  if (querystring != nullptr) {
    
  } else {
    
  }
  querystring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), querystring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.HTTPExtension.querystring)
}

// -------------------------------------------------------------------

// InvokeRequest

// string method = 1;
inline void InvokeRequest::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& InvokeRequest::method() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeRequest.method)
  return _internal_method();
}
inline void InvokeRequest::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.InvokeRequest.method)
}
inline std::string* InvokeRequest::mutable_method() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeRequest.method)
  return _internal_mutable_method();
}
inline const std::string& InvokeRequest::_internal_method() const {
  return method_.Get();
}
inline void InvokeRequest::_internal_set_method(const std::string& value) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InvokeRequest::set_method(std::string&& value) {
  
  method_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.common.v1.InvokeRequest.method)
}
inline void InvokeRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.common.v1.InvokeRequest.method)
}
inline void InvokeRequest::set_method(const char* value,
    size_t size) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.common.v1.InvokeRequest.method)
}
inline std::string* InvokeRequest::_internal_mutable_method() {
  
  return method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InvokeRequest::release_method() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeRequest.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeRequest.method)
}

// .google.protobuf.Any data = 2;
inline bool InvokeRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool InvokeRequest::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& InvokeRequest::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& InvokeRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeRequest.data)
  return _internal_data();
}
inline void InvokeRequest::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.InvokeRequest.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeRequest::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeRequest.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeRequest.data)
  return _internal_mutable_data();
}
inline void InvokeRequest::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeRequest.data)
}

// string content_type = 3;
inline void InvokeRequest::clear_content_type() {
  content_type_.ClearToEmpty();
}
inline const std::string& InvokeRequest::content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeRequest.content_type)
  return _internal_content_type();
}
inline void InvokeRequest::set_content_type(const std::string& value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.InvokeRequest.content_type)
}
inline std::string* InvokeRequest::mutable_content_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeRequest.content_type)
  return _internal_mutable_content_type();
}
inline const std::string& InvokeRequest::_internal_content_type() const {
  return content_type_.Get();
}
inline void InvokeRequest::_internal_set_content_type(const std::string& value) {
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InvokeRequest::set_content_type(std::string&& value) {
  
  content_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.common.v1.InvokeRequest.content_type)
}
inline void InvokeRequest::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.common.v1.InvokeRequest.content_type)
}
inline void InvokeRequest::set_content_type(const char* value,
    size_t size) {
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.common.v1.InvokeRequest.content_type)
}
inline std::string* InvokeRequest::_internal_mutable_content_type() {
  
  return content_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InvokeRequest::release_content_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeRequest.content_type)
  return content_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeRequest::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeRequest.content_type)
}

// .dapr.proto.common.v1.HTTPExtension http_extension = 4;
inline bool InvokeRequest::_internal_has_http_extension() const {
  return this != internal_default_instance() && http_extension_ != nullptr;
}
inline bool InvokeRequest::has_http_extension() const {
  return _internal_has_http_extension();
}
inline void InvokeRequest::clear_http_extension() {
  if (GetArena() == nullptr && http_extension_ != nullptr) {
    delete http_extension_;
  }
  http_extension_ = nullptr;
}
inline const ::dapr::proto::common::v1::HTTPExtension& InvokeRequest::_internal_http_extension() const {
  const ::dapr::proto::common::v1::HTTPExtension* p = http_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::dapr::proto::common::v1::HTTPExtension&>(
      ::dapr::proto::common::v1::_HTTPExtension_default_instance_);
}
inline const ::dapr::proto::common::v1::HTTPExtension& InvokeRequest::http_extension() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeRequest.http_extension)
  return _internal_http_extension();
}
inline void InvokeRequest::unsafe_arena_set_allocated_http_extension(
    ::dapr::proto::common::v1::HTTPExtension* http_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_extension_);
  }
  http_extension_ = http_extension;
  if (http_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.InvokeRequest.http_extension)
}
inline ::dapr::proto::common::v1::HTTPExtension* InvokeRequest::release_http_extension() {
  
  ::dapr::proto::common::v1::HTTPExtension* temp = http_extension_;
  http_extension_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::HTTPExtension* InvokeRequest::unsafe_arena_release_http_extension() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeRequest.http_extension)
  
  ::dapr::proto::common::v1::HTTPExtension* temp = http_extension_;
  http_extension_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::HTTPExtension* InvokeRequest::_internal_mutable_http_extension() {
  
  if (http_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::HTTPExtension>(GetArena());
    http_extension_ = p;
  }
  return http_extension_;
}
inline ::dapr::proto::common::v1::HTTPExtension* InvokeRequest::mutable_http_extension() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeRequest.http_extension)
  return _internal_mutable_http_extension();
}
inline void InvokeRequest::set_allocated_http_extension(::dapr::proto::common::v1::HTTPExtension* http_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete http_extension_;
  }
  if (http_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(http_extension);
    if (message_arena != submessage_arena) {
      http_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http_extension, submessage_arena);
    }
    
  } else {
    
  }
  http_extension_ = http_extension;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeRequest.http_extension)
}

// -------------------------------------------------------------------

// InvokeResponse

// .google.protobuf.Any data = 1;
inline bool InvokeResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool InvokeResponse::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& InvokeResponse::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& InvokeResponse::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeResponse.data)
  return _internal_data();
}
inline void InvokeResponse::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.InvokeResponse.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeResponse::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeResponse.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeResponse.data)
  return _internal_mutable_data();
}
inline void InvokeResponse::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeResponse.data)
}

// string content_type = 2;
inline void InvokeResponse::clear_content_type() {
  content_type_.ClearToEmpty();
}
inline const std::string& InvokeResponse::content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeResponse.content_type)
  return _internal_content_type();
}
inline void InvokeResponse::set_content_type(const std::string& value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.InvokeResponse.content_type)
}
inline std::string* InvokeResponse::mutable_content_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeResponse.content_type)
  return _internal_mutable_content_type();
}
inline const std::string& InvokeResponse::_internal_content_type() const {
  return content_type_.Get();
}
inline void InvokeResponse::_internal_set_content_type(const std::string& value) {
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InvokeResponse::set_content_type(std::string&& value) {
  
  content_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.common.v1.InvokeResponse.content_type)
}
inline void InvokeResponse::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.common.v1.InvokeResponse.content_type)
}
inline void InvokeResponse::set_content_type(const char* value,
    size_t size) {
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.common.v1.InvokeResponse.content_type)
}
inline std::string* InvokeResponse::_internal_mutable_content_type() {
  
  return content_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InvokeResponse::release_content_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeResponse.content_type)
  return content_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeResponse::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeResponse.content_type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StateItem

// string key = 1;
inline void StateItem::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& StateItem::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateItem.key)
  return _internal_key();
}
inline void StateItem::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StateItem.key)
}
inline std::string* StateItem::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StateItem.key)
  return _internal_mutable_key();
}
inline const std::string& StateItem::_internal_key() const {
  return key_.Get();
}
inline void StateItem::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StateItem::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.common.v1.StateItem.key)
}
inline void StateItem::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.common.v1.StateItem.key)
}
inline void StateItem::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.common.v1.StateItem.key)
}
inline std::string* StateItem::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StateItem::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StateItem.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StateItem::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StateItem.key)
}

// bytes value = 2;
inline void StateItem::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StateItem::value() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateItem.value)
  return _internal_value();
}
inline void StateItem::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StateItem.value)
}
inline std::string* StateItem::mutable_value() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StateItem.value)
  return _internal_mutable_value();
}
inline const std::string& StateItem::_internal_value() const {
  return value_.Get();
}
inline void StateItem::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StateItem::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.common.v1.StateItem.value)
}
inline void StateItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.common.v1.StateItem.value)
}
inline void StateItem::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.common.v1.StateItem.value)
}
inline std::string* StateItem::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StateItem::release_value() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StateItem.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StateItem::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StateItem.value)
}

// .dapr.proto.common.v1.Etag etag = 3;
inline bool StateItem::_internal_has_etag() const {
  return this != internal_default_instance() && etag_ != nullptr;
}
inline bool StateItem::has_etag() const {
  return _internal_has_etag();
}
inline void StateItem::clear_etag() {
  if (GetArena() == nullptr && etag_ != nullptr) {
    delete etag_;
  }
  etag_ = nullptr;
}
inline const ::dapr::proto::common::v1::Etag& StateItem::_internal_etag() const {
  const ::dapr::proto::common::v1::Etag* p = etag_;
  return p != nullptr ? *p : reinterpret_cast<const ::dapr::proto::common::v1::Etag&>(
      ::dapr::proto::common::v1::_Etag_default_instance_);
}
inline const ::dapr::proto::common::v1::Etag& StateItem::etag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateItem.etag)
  return _internal_etag();
}
inline void StateItem::unsafe_arena_set_allocated_etag(
    ::dapr::proto::common::v1::Etag* etag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(etag_);
  }
  etag_ = etag;
  if (etag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.StateItem.etag)
}
inline ::dapr::proto::common::v1::Etag* StateItem::release_etag() {
  
  ::dapr::proto::common::v1::Etag* temp = etag_;
  etag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::Etag* StateItem::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StateItem.etag)
  
  ::dapr::proto::common::v1::Etag* temp = etag_;
  etag_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::Etag* StateItem::_internal_mutable_etag() {
  
  if (etag_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::Etag>(GetArena());
    etag_ = p;
  }
  return etag_;
}
inline ::dapr::proto::common::v1::Etag* StateItem::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StateItem.etag)
  return _internal_mutable_etag();
}
inline void StateItem::set_allocated_etag(::dapr::proto::common::v1::Etag* etag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete etag_;
  }
  if (etag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(etag);
    if (message_arena != submessage_arena) {
      etag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, etag, submessage_arena);
    }
    
  } else {
    
  }
  etag_ = etag;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StateItem.etag)
}

// map<string, string> metadata = 4;
inline int StateItem::_internal_metadata_size() const {
  return metadata_.size();
}
inline int StateItem::metadata_size() const {
  return _internal_metadata_size();
}
inline void StateItem::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StateItem::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StateItem::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.common.v1.StateItem.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StateItem::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StateItem::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.common.v1.StateItem.metadata)
  return _internal_mutable_metadata();
}

// .dapr.proto.common.v1.StateOptions options = 5;
inline bool StateItem::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool StateItem::has_options() const {
  return _internal_has_options();
}
inline void StateItem::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::dapr::proto::common::v1::StateOptions& StateItem::_internal_options() const {
  const ::dapr::proto::common::v1::StateOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::dapr::proto::common::v1::StateOptions&>(
      ::dapr::proto::common::v1::_StateOptions_default_instance_);
}
inline const ::dapr::proto::common::v1::StateOptions& StateItem::options() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateItem.options)
  return _internal_options();
}
inline void StateItem::unsafe_arena_set_allocated_options(
    ::dapr::proto::common::v1::StateOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.StateItem.options)
}
inline ::dapr::proto::common::v1::StateOptions* StateItem::release_options() {
  
  ::dapr::proto::common::v1::StateOptions* temp = options_;
  options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::StateOptions* StateItem::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StateItem.options)
  
  ::dapr::proto::common::v1::StateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::StateOptions* StateItem::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::StateOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::dapr::proto::common::v1::StateOptions* StateItem::mutable_options() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StateItem.options)
  return _internal_mutable_options();
}
inline void StateItem::set_allocated_options(::dapr::proto::common::v1::StateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StateItem.options)
}

// -------------------------------------------------------------------

// Etag

// string value = 1;
inline void Etag::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Etag::value() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.Etag.value)
  return _internal_value();
}
inline void Etag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.Etag.value)
}
inline std::string* Etag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.Etag.value)
  return _internal_mutable_value();
}
inline const std::string& Etag::_internal_value() const {
  return value_.Get();
}
inline void Etag::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Etag::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.common.v1.Etag.value)
}
inline void Etag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.common.v1.Etag.value)
}
inline void Etag::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.common.v1.Etag.value)
}
inline std::string* Etag::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Etag::release_value() {
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.Etag.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Etag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.Etag.value)
}

// -------------------------------------------------------------------

// StateOptions

// .dapr.proto.common.v1.StateOptions.StateConcurrency concurrency = 1;
inline void StateOptions::clear_concurrency() {
  concurrency_ = 0;
}
inline ::dapr::proto::common::v1::StateOptions_StateConcurrency StateOptions::_internal_concurrency() const {
  return static_cast< ::dapr::proto::common::v1::StateOptions_StateConcurrency >(concurrency_);
}
inline ::dapr::proto::common::v1::StateOptions_StateConcurrency StateOptions::concurrency() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateOptions.concurrency)
  return _internal_concurrency();
}
inline void StateOptions::_internal_set_concurrency(::dapr::proto::common::v1::StateOptions_StateConcurrency value) {
  
  concurrency_ = value;
}
inline void StateOptions::set_concurrency(::dapr::proto::common::v1::StateOptions_StateConcurrency value) {
  _internal_set_concurrency(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StateOptions.concurrency)
}

// .dapr.proto.common.v1.StateOptions.StateConsistency consistency = 2;
inline void StateOptions::clear_consistency() {
  consistency_ = 0;
}
inline ::dapr::proto::common::v1::StateOptions_StateConsistency StateOptions::_internal_consistency() const {
  return static_cast< ::dapr::proto::common::v1::StateOptions_StateConsistency >(consistency_);
}
inline ::dapr::proto::common::v1::StateOptions_StateConsistency StateOptions::consistency() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateOptions.consistency)
  return _internal_consistency();
}
inline void StateOptions::_internal_set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value) {
  
  consistency_ = value;
}
inline void StateOptions::set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value) {
  _internal_set_consistency(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StateOptions.consistency)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace dapr

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dapr::proto::common::v1::HTTPExtension_Verb> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dapr::proto::common::v1::HTTPExtension_Verb>() {
  return ::dapr::proto::common::v1::HTTPExtension_Verb_descriptor();
}
template <> struct is_proto_enum< ::dapr::proto::common::v1::StateOptions_StateConcurrency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dapr::proto::common::v1::StateOptions_StateConcurrency>() {
  return ::dapr::proto::common::v1::StateOptions_StateConcurrency_descriptor();
}
template <> struct is_proto_enum< ::dapr::proto::common::v1::StateOptions_StateConsistency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dapr::proto::common::v1::StateOptions_StateConsistency>() {
  return ::dapr::proto::common::v1::StateOptions_StateConsistency_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto
